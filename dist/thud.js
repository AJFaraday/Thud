/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var Game;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/clients.js":
/*!************************!*\
  !*** ./src/clients.js ***!
  \************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n  'dwarf/ajfaraday/baby_steps': __webpack_require__(/*! ./clients/dwarf/ajfaraday/baby_steps.js */ \"./src/clients/dwarf/ajfaraday/baby_steps.js\"),\n  'dwarf/default/keep_away': __webpack_require__(/*! ./clients/dwarf/default/keep_away.js */ \"./src/clients/dwarf/default/keep_away.js\"),\n  'dwarf/default/lucky_7': __webpack_require__(/*! ./clients/dwarf/default/lucky_7.js */ \"./src/clients/dwarf/default/lucky_7.js\"),\n  'dwarf/shaggy/baby_steps_duplicate': __webpack_require__(/*! ./clients/dwarf/shaggy/baby_steps_duplicate.js */ \"./src/clients/dwarf/shaggy/baby_steps_duplicate.js\"),\n  'dwarf/template': __webpack_require__(/*! ./clients/dwarf/template.js */ \"./src/clients/dwarf/template.js\"),\n  'inert/dummy': __webpack_require__(/*! ./clients/inert/dummy.js */ \"./src/clients/inert/dummy.js\"),\n  'inert/dummy_two': __webpack_require__(/*! ./clients/inert/dummy_two.js */ \"./src/clients/inert/dummy_two.js\"),\n  'inert/manual': __webpack_require__(/*! ./clients/inert/manual.js */ \"./src/clients/inert/manual.js\"),\n  'troll/ajfaraday/_imported': __webpack_require__(/*! ./clients/troll/ajfaraday/_imported.js */ \"./src/clients/troll/ajfaraday/_imported.js\"),\n  'troll/default/last_move': __webpack_require__(/*! ./clients/troll/default/last_move.js */ \"./src/clients/troll/default/last_move.js\"),\n  'troll/default/spread_out': __webpack_require__(/*! ./clients/troll/default/spread_out.js */ \"./src/clients/troll/default/spread_out.js\"),\n  'troll/shaggy/_imported_duplicate': __webpack_require__(/*! ./clients/troll/shaggy/_imported_duplicate.js */ \"./src/clients/troll/shaggy/_imported_duplicate.js\"),\n  'troll/template': __webpack_require__(/*! ./clients/troll/template.js */ \"./src/clients/troll/template.js\"),\n};\n\n//# sourceURL=webpack://Game/./src/clients.js?");

/***/ }),

/***/ "./src/clients/dwarf/ajfaraday/baby_steps.js":
/*!***************************************************!*\
  !*** ./src/clients/dwarf/ajfaraday/baby_steps.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n    this.it_is_a_day = false;\n  }\n\n  turn() {\n    var dwarf = this.controller.dwarfs()[0];\n    if(dwarf) {\n      var moves = this.controller.check_space(dwarf.x, dwarf.y).safe_moves;\n      if(moves[0]) {\n        this.controller.select_space(dwarf.x, dwarf.y);\n        this.controller.move(moves[0].x, moves[0].y);\n      } else {\n        this.call_it_a_day();\n      }\n    } else {\n      this.call_it_a_day();\n    }\n  }\n\n  call_it_a_day() {\n    this.it_is_a_day = true;\n    this.controller.declare(true);\n\n    var dwarf = this.controller.dwarfs()[0];\n    var space_info = this.controller.check_space(dwarf.x, dwarf.y);\n    this.controller.select_space(dwarf.x, dwarf.y);\n    this.controller.move(space_info.moves[0].x, space_info.moves[0].y);\n  }\n\n  end_turn() {\n    var scores = this.controller.scores();\n    this.controller.declare(this.it_is_a_day || scores.winning == 'd');\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/dwarf/ajfaraday/baby_steps.js?");

/***/ }),

/***/ "./src/clients/dwarf/default/keep_away.js":
/*!************************************************!*\
  !*** ./src/clients/dwarf/default/keep_away.js ***!
  \************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n    var killing_moves = this.controller.killing_moves();\n    if (killing_moves.length > 0) {\n      this.controller.select_space(killing_moves[0].from.x, killing_moves[0].from.y);\n      this.controller.move(killing_moves[0].to.x, killing_moves[0].to.y);\n    } else {\n      var closest_dwarf = this.get_closest_dwarf();\n      // Go through it's moves, find the one where the nearest troll is farthest away\n      var space_info = this.controller.check_space(closest_dwarf.x, closest_dwarf.y);\n      this.controller.select_space(closest_dwarf.x, closest_dwarf.y)\n      var move_target, space_info, distance = 0;\n      space_info.moves.forEach((move) => {\n        var space_info = this.controller.space_info(move.x, move.y);\n        if (space_info.nearest_troll.distance > distance) {\n          distance = space_info.nearest_troll.distance;\n          move_target = space_info;\n        }\n      });\n      this.controller.move(move_target.x, move_target.y);\n    }\n  }\n\n  // Get the dwarf who is closest to a troll (or the first with equal distances)\n  get_closest_dwarf() {\n    var closest_dwarfs = [];\n    var closest_distance = 999;\n    this.controller.dwarfs().forEach((dwarf) => {\n      var space_info = this.controller.space_info(dwarf.x, dwarf.y);\n      if (space_info.nearest_troll.distance < closest_distance) {\n        closest_distance = space_info.nearest_troll.distance;\n        closest_dwarfs = [dwarf];\n      }\n      if (closest_distance == space_info.nearest_troll.distance) {\n        closest_dwarfs.push(dwarf);\n      }\n    });\n    return closest_dwarfs[0];\n  }\n\n  end_turn() {\n\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/dwarf/default/keep_away.js?");

/***/ }),

/***/ "./src/clients/dwarf/default/lucky_7.js":
/*!**********************************************!*\
  !*** ./src/clients/dwarf/default/lucky_7.js ***!
  \**********************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n    this.it_is_a_day = false;\n  }\n\n  turn() {\n    var dwarf = this.controller.dwarfs()[7];\n    if(dwarf) {\n      var moves = this.controller.check_space(dwarf.x, dwarf.y).safe_moves;\n      if(moves[7]) {\n        this.controller.select_space(dwarf.x, dwarf.y);\n        this.controller.move(moves[7].x, moves[7].y);\n      } else {\n        this.call_it_a_day();\n      }\n    } else {\n      this.call_it_a_day();\n    }\n  }\n\n  call_it_a_day() {\n    this.it_is_a_day = true;\n    this.controller.declare(true);\n\n    var dwarf = this.controller.dwarfs()[0];\n    var space_info = this.controller.check_space(dwarf.x, dwarf.y);\n    this.controller.select_space(dwarf.x, dwarf.y);\n    this.controller.move(space_info.moves[0].x, space_info.moves[0].y);\n  }\n\n  end_turn() {\n    var scores = this.controller.scores();\n    this.controller.declare(this.it_is_a_day || scores.winning == 'd');\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/dwarf/default/lucky_7.js?");

/***/ }),

/***/ "./src/clients/dwarf/shaggy/baby_steps_duplicate.js":
/*!**********************************************************!*\
  !*** ./src/clients/dwarf/shaggy/baby_steps_duplicate.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n    this.it_is_a_day = false;\n  }\n\n  turn() {\n    var dwarf = this.controller.dwarfs()[0];\n    if(dwarf) {\n      var moves = this.controller.check_space(dwarf.x, dwarf.y).safe_moves;\n      if(moves[0]) {\n        this.controller.select_space(dwarf.x, dwarf.y);\n        this.controller.move(moves[0].x, moves[0].y);\n      } else {\n        this.call_it_a_day();\n      }\n    } else {\n      this.call_it_a_day();\n    }\n  }\n\n  call_it_a_day() {\n    this.it_is_a_day = true;\n    this.controller.declare(true);\n\n    var dwarf = this.controller.dwarfs()[0];\n    var space_info = this.controller.check_space(dwarf.x, dwarf.y);\n    this.controller.select_space(dwarf.x, dwarf.y);\n    this.controller.move(space_info.moves[0].x, space_info.moves[0].y);\n  }\n\n  end_turn() {\n    var scores = this.controller.scores();\n    this.controller.declare(this.it_is_a_day || scores.winning == 'd');\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/dwarf/shaggy/baby_steps_duplicate.js?");

/***/ }),

/***/ "./src/clients/dwarf/template.js":
/*!***************************************!*\
  !*** ./src/clients/dwarf/template.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n\n  }\n\n  end_turn() {\n\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/dwarf/template.js?");

/***/ }),

/***/ "./src/clients/inert/dummy.js":
/*!************************************!*\
  !*** ./src/clients/inert/dummy.js ***!
  \************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n  }\n\n  end_turn() {\n  }\n\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/inert/dummy.js?");

/***/ }),

/***/ "./src/clients/inert/dummy_two.js":
/*!****************************************!*\
  !*** ./src/clients/inert/dummy_two.js ***!
  \****************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n  }\n\n  end_turn() {\n  }\n\n\n}\n\n\n\n//# sourceURL=webpack://Game/./src/clients/inert/dummy_two.js?");

/***/ }),

/***/ "./src/clients/inert/manual.js":
/*!*************************************!*\
  !*** ./src/clients/inert/manual.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./../../lib/utils.js */ \"./src/lib/utils.js\");\nconst Reporters = __webpack_require__(/*! ./../../reporters.js */ \"./src/reporters.js\");\n\n// This is strongly coupled with Reporters.Canvas\nclass Manual {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.canvas = document.querySelector(\"#thud_board canvas\");\n    this.utils = utils;\n    this.checked_coord = {x: 0, y: 0}\n  }\n\n  turn() {\n    Utils.addListener(this.canvas, 'mousemove', e => this.mouseover(e), false);\n    Utils.addListener(this.canvas, 'mouseup', e => this.mouseup(e), false);\n    Utils.addListener(this.canvas, 'contextmenu', e => this.debug_space(e), false);\n    Utils.addListener(this.declare_button(), 'mouseup', e => this.declare(), false);\n  }\n\n  end_turn() {\n    Utils.removeAllListeners(this.canvas, 'mousemove');\n    Utils.removeAllListeners(this.canvas, 'mouseup');\n    Utils.removeAllListeners(this.canvas, 'contextmenu');\n    Utils.removeAllListeners(this.declare_button(), 'mouseup');\n  }\n\n\n  mouseover(event) {\n    var coord = this.coord_at(event.offsetX, event.offsetY);\n    if (coord && game.board.space(coord.x, coord.y) && (this.checked_coord.x != coord.x || this.checked_coord.y != coord.y)) {\n      this.checked_coord = coord;\n      if (this.controller.current_space) {\n        this.controller.check_move(coord.x, coord.y);\n      } else {\n        this.controller.check_space(coord.x, coord.y);\n      }\n    }\n  }\n\n  mouseup(event) {\n    var space = this.space_at(event.offsetX, event.offsetY);\n    if (space) {\n      if (this.controller.current_space) {\n        this.controller.move(space.x, space.y);\n      } else {\n        this.controller.select_space(space.x, space.y);\n      }\n    }\n  }\n\n  debug_space(event) {\n    event.preventDefault();\n    var space = this.space_at(event.offsetX, event.offsetY);\n    if (space.piece) {\n      console.log(space.piece)\n      space.moves.forEach(\n        move => game.reporters[0].outline_space(move, Reporters.Canvas.move_colours[move.type])\n      );\n    } else {\n      console.log(space)\n    }\n    game.current_controller().space_info(space.x, space.y).nearest_troll.pieces.forEach(\n      (coord) => {\n        game.reporters[0].outline_space(coord, 'green')\n      }\n    );\n    game.current_controller().space_info(space.x, space.y).nearest_dwarf.pieces.forEach(\n      (coord) => {\n        game.reporters[0].outline_space(coord, 'blue')\n      }\n    );\n  }\n\n  coord_at(x,y) {\n    return {\n      x:  Math.floor(x / Reporters.Canvas.space_size),\n      y:  Math.floor(y / Reporters.Canvas.space_size)\n    }\n  }\n\n  space_at(x, y) {\n    return this.controller.space_info(\n      Math.floor(x / Reporters.Canvas.space_size),\n      Math.floor(y / Reporters.Canvas.space_size)\n    );\n  }\n\n  declare_button() {\n    if (this.side == 'd') {\n      return document.getElementById('dwarf_declare_button');\n    } else if (this.side == 't') {\n      return document.getElementById('troll_declare_button');\n    }\n  }\n\n  declare() {\n    var button = this.declare_button();\n    button.dataset.over = button.dataset.over != 'true';\n    this.controller.declare(button.dataset.over == 'true');\n  }\n\n}\n\nmodule.exports = Manual;\n\n\n//# sourceURL=webpack://Game/./src/clients/inert/manual.js?");

/***/ }),

/***/ "./src/clients/troll/ajfaraday/_imported.js":
/*!**************************************************!*\
  !*** ./src/clients/troll/ajfaraday/_imported.js ***!
  \**************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n    var target = this.controller.previous_move().to;\n    var troll = this.controller.space_info(target.x, target.y).nearest_troll.pieces[0];\n    this.controller.select_space(troll.x, troll.y);\n    var space_info = this.controller.check_space(troll.x, troll.y);\n    var closest_move = this.utils.closest_to(space_info.moves, target);\n    this.controller.move(closest_move.x, closest_move.y);\n  }\n\n  end_turn() {\n    var scores = this.controller.scores();\n    this.controller.declare(scores.winning == 't');\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/troll/ajfaraday/_imported.js?");

/***/ }),

/***/ "./src/clients/troll/default/last_move.js":
/*!************************************************!*\
  !*** ./src/clients/troll/default/last_move.js ***!
  \************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n    var target = this.controller.previous_move().to;\n    var troll = this.controller.space_info(target.x, target.y).nearest_troll.pieces[0];\n    this.controller.select_space(troll.x, troll.y);\n    var space_info = this.controller.check_space(troll.x, troll.y);\n    var closest_move = this.utils.closest_to(space_info.moves, target);\n    this.controller.move(closest_move.x, closest_move.y);\n  }\n\n  end_turn() {\n    var scores = this.controller.scores();\n    this.controller.declare(scores.winning == 't');\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/troll/default/last_move.js?");

/***/ }),

/***/ "./src/clients/troll/default/spread_out.js":
/*!*************************************************!*\
  !*** ./src/clients/troll/default/spread_out.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n    this.troll_index = -1;\n    // Correspond to indexed_trolls\n    this.troll_info = [\n      {attack: false, step: [-1, -1]}, //NW\n      {attack: false, step: [0, -1]}, //N\n      {attack: false, step: [1, -1]}, //NE\n      {attack: false, step: [-1, 0]}, //W\n      {attack: false, step: [1, 0]}, //E\n      {attack: false, step: [-1, 1]}, //SW\n      {attack: false, step: [0, 1]}, //S\n      {attack: false, step: [1, 1]} //SE\n    ]\n    this.troll_index = 0;\n  }\n\n  turn() {\n    var killing_moves = this.controller.killing_moves();\n    if (killing_moves.length > 0) {\n      this.controller.select_space(killing_moves[0].from.x, killing_moves[0].from.y);\n      this.controller.move(killing_moves[0].to.x, killing_moves[0].to.y);\n    } else {\n      var space = this.controller.trolls()[this.troll_index % this.controller.trolls().length];\n      this.troll_index += 1;\n      var indexed_trolls = this.controller.indexed_trolls();\n      var index = indexed_trolls.indexOf(\n        indexed_trolls.find(troll => {\n          return troll && troll.x == space.x && troll.y == space.y\n        })\n      );\n      var troll_info = this.troll_info[index];\n      var troll = this.controller.space_info(space.x, space.y);\n      if (troll_info.attack) {\n        this.attack(troll);\n      } else {\n        // Look one step towards the edge\n        var move_target = {\n          x: (troll.x + troll_info.step[0]),\n          y: (troll.y + troll_info.step[1])\n        }\n        // If you can walk that way, go there\n        if (troll.moves.some(move => move.x == move_target.x && move.y == move_target.y)) {\n          this.controller.select_space(troll.x, troll.y);\n          this.controller.move(move_target.x, move_target.y);\n        } else {\n          // Change to attack mode\n          troll_info.attack = true;\n          this.attack(troll);\n        }\n      }\n    }\n  }\n\n  // troll is space_info\n  // If there's no more moves in the step direction to take, just go towards the nearest dwarf\n  attack(troll) {\n    var target = troll.nearest_dwarf.pieces[0];\n    var closest_move = this.utils.closest_to(troll.moves, target);\n    this.controller.select_space(troll.x, troll.y);\n    this.controller.move(closest_move.x, closest_move.y);\n  }\n\n  end_turn() {\n\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/troll/default/spread_out.js?");

/***/ }),

/***/ "./src/clients/troll/shaggy/_imported_duplicate.js":
/*!*********************************************************!*\
  !*** ./src/clients/troll/shaggy/_imported_duplicate.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n    var target = this.controller.previous_move().to;\n    var troll = this.controller.space_info(target.x, target.y).nearest_troll.pieces[0];\n    this.controller.select_space(troll.x, troll.y);\n    var space_info = this.controller.check_space(troll.x, troll.y);\n    var closest_move = this.utils.closest_to(space_info.moves, target);\n    this.controller.move(closest_move.x, closest_move.y);\n  }\n\n  end_turn() {\n    var scores = this.controller.scores();\n    this.controller.declare(scores.winning == 't');\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/troll/shaggy/_imported_duplicate.js?");

/***/ }),

/***/ "./src/clients/troll/template.js":
/*!***************************************!*\
  !*** ./src/clients/troll/template.js ***!
  \***************************************/
/***/ ((module) => {

eval("module.exports = class {\n  constructor(controller, utils) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.utils = utils;\n  }\n\n  turn() {\n\n  }\n\n  end_turn() {\n\n  }\n\n}\n\n\n//# sourceURL=webpack://Game/./src/clients/troll/template.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _models_game_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./models/game.js */ \"./src/models/game.js\");\n/* harmony import */ var _models_game_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_models_game_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _clients_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clients.js */ \"./src/clients.js\");\n/* harmony import */ var _clients_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_clients_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_modal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/modal.js */ \"./src/lib/modal.js\");\n/* harmony import */ var _lib_modal_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lib_modal_js__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nvar game = new (_models_game_js__WEBPACK_IMPORTED_MODULE_0___default())(\n  {\n    reporters: ['Canvas', 'Console'],\n    //dwarf_client: 'dwarf/default/keep_away',\n    //troll_client: 'troll/default/last_move',\n    troll_client: 'inert/manual',\n    dwarf_client: 'inert/manual',\n    delay: 100\n  }\n);\n\n\n//game.reinit('dwarf/default/keep_away', 'troll/default/spread_out', 50)\n\n\nwindow.Clients = (_clients_js__WEBPACK_IMPORTED_MODULE_1___default());\nwindow.modal = new (_lib_modal_js__WEBPACK_IMPORTED_MODULE_2___default())(game)\nwindow.game = game;\n\n\n//# sourceURL=webpack://Game/./src/index.js?");

/***/ }),

/***/ "./src/lib/client_validator.js":
/*!*************************************!*\
  !*** ./src/lib/client_validator.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Game = __webpack_require__(/*! ../../src/models/game.js */ \"./src/models/game.js\");\nconst Clients = __webpack_require__(/*! ../../src/clients.js */ \"./src/clients.js\");\n\nclass ClientValidator {\n\n  constructor(client_body, path) {\n    this.path = path;\n    this.client_body = client_body\n    this.errors = [];\n    this.valid = true;\n    this.messages = [];\n    this.validate();\n  }\n\n  client_class() {\n    if (this.cached_class) {\n      return this.cached_class;\n    } else {\n      try {\n        eval(`this.cached_class = ${this.client_body}`);\n        return this.cached_class;\n      } catch (error) {\n        this.add_error(`Error evaluating code: ${error}`)\n      }\n    }\n  }\n\n  test_client() {\n    if (this.cached_client) {\n      return this.cached_client\n    } else {\n      var game = new Game(\n        {\n          dwarf_client: 'inert/dummy',\n          troll_client: 'inert/dummy'\n        }\n      );\n      var kls = this.client_class();\n      if (this.valid) {\n        var controller;\n        if (this.is_dwarf()) {\n          controller = game.dwarf_controller;\n        } else {\n          controller = game.troll_controller;\n        }\n        try {\n          this.cached_client = new kls(controller);\n          return this.cached_client;\n        } catch (error) {\n          this.add_error(`Error initializing test client: ${error}`);\n        }\n      }\n    }\n  }\n\n  validate() {\n    this.validate_game_not_used();\n    this.validate_terms_not_used()\n    // Validate presence of turn and end_turn functions\n    if (this.test_client() && this.valid) {\n      this.validate_completes_games();\n    }\n    return this.valid;\n  }\n\n  validate_terms_not_used() {\n    ['Math.random', 'setTimeout', 'setInterval', 'eval', 'import'].forEach(term => {\n      if (this.client_body.includes(term)) {\n        this.add_error(`Use of \\`${term}\\` is forbidden`);\n      }\n    });\n  }\n\n  validate_game_not_used() {\n    if (this.client_body.includes('game.')) {\n      this.add_error('Use of the `game` global variable is forbidden');\n    }\n  }\n\n  validate_completes_games() {\n    var opposite_side = this.is_dwarf() ? 'troll' : 'dwarf';\n    Object.keys(Clients).forEach((client_path) => {\n        if (client_path.includes(`${opposite_side}/default/`)) {\n          var attrs;\n          if (this.is_dwarf()) {\n            attrs = {\n              reporters: [],\n              dwarf_client: this.client_class(),\n              troll_client: client_path,\n              delay: 0\n            }\n          } else {\n            attrs = {\n              reporters: [],\n              dwarf_client: client_path,\n              troll_client: this.client_class(),\n              delay: 0\n            }\n          }\n          try {\n            var game = new Game(attrs);\n            if (game.end_reason) {\n              this.messages.push(`Completed game against ${client_path} in ${game.turn_number} turns`);\n              var score = game.get_score();\n              this.messages.push(`${game.end_reason}! ${score.winning} win by ${score.difference}`);\n            } else {\n              this.add_error(`Did not finish game against ${client_path}. Probably because this client did not call a valid move within the turn method`);\n            }\n          } catch (error) {\n            this.add_error(`Error while running game against ${client_path}: ${error}`)\n          }\n        }\n      }\n    );\n  }\n\n  is_dwarf() {\n    return this.path.includes('dwarf');\n  }\n\n  add_error(error) {\n    this.errors.push(error);\n    this.valid = false;\n  }\n\n}\n\nmodule.exports = ClientValidator;\n\n//# sourceURL=webpack://Game/./src/lib/client_validator.js?");

/***/ }),

/***/ "./src/lib/controller.js":
/*!*******************************!*\
  !*** ./src/lib/controller.js ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ControllerHelper = __webpack_require__(/*! ./controller_helper.js */ \"./src/lib/controller_helper.js\");\n\nclass Controller {\n\n  constructor(game, side) {\n    this.game = game;\n    this.side = side;\n    this.current_space = null;\n    this.helper = new ControllerHelper(this, game);\n    this.turn_cache = {turn: 0};\n  }\n\n  turn() {\n    var controller = this;\n    return this.wrapper(() => {\n      return controller.game.turn_number;\n    });\n  }\n\n  scores() {\n    var controller = this;\n    return controller.game.get_score();\n  }\n\n  spaces() {\n    var controller = this;\n    return Array.from(\n      controller.game.board.spaces,\n      space => controller.helper.space_proxy(space)\n    );\n  }\n\n  space_info(x, y) {\n    var controller = this;\n    return controller.helper.space_info(x, y);\n  }\n\n  pieces() {\n    if (this.side == 'd') {\n      return this.dwarfs();\n    } else if (this.side == 't') {\n      return this.trolls();\n    }\n  }\n\n  dwarfs() {\n    var controller = this;\n    return Array.from(\n      controller.game.dwarfs,\n      dwarf => ({x: dwarf.x, y: dwarf.y})\n    );\n  }\n\n  trolls() {\n    var controller = this;\n    return Array.from(\n      controller.game.trolls,\n      troll => ({x: troll.x, y: troll.y})\n    );\n  }\n\n  indexed_dwarfs() {\n    var controller = this;\n    return Array.from(\n      controller.game.indexed_dwarfs,\n      dwarf => (dwarf ? {x: dwarf.x, y: dwarf.y} : null)\n    );\n  }\n\n  indexed_trolls() {\n    var controller = this;\n    return Array.from(\n      controller.game.indexed_trolls,\n      troll => (troll ? {x: troll.x, y: troll.y} : null)\n    );\n  }\n\n  previous_move() {\n    var controller = this;\n    return Object.assign(controller.game.previous_move);\n  }\n\n  killing_moves() {\n    var killing_moves = [];\n    this.pieces().forEach((piece) => {\n      var space_info = this.space_info(piece.x, piece.y);\n      space_info.moves.forEach((move) => {\n        if (move.kills > 0) {\n          killing_moves.push({\n            from: {x: piece.x, y: piece.y},\n            to: {x: move.x, y: move.y},\n            kills: move.kills\n          });\n        }\n      });\n    });\n    return killing_moves.flat();\n  }\n\n// Actual actions\n  check_space(x, y) {\n    var controller = this;\n    return controller.wrapper(\n      () => {\n        var space = controller.game.board.space(x, y);\n        if(space.piece && space.piece.type == this.side) {\n          // Sets checked_space\n          controller.helper.moves_for(space);\n          controller.game.report('highlight_space', controller.checked_space);\n          return controller.space_info(x, y);\n        } else {\n          return null;\n        }\n      }\n    );\n  }\n\n  select_space(x, y) {\n    var controller = this;\n    return controller.wrapper(\n      () => {\n        var space = controller.helper.space_proxy(controller.game.board.space(x, y));\n        if (space) {\n          if (!controller.checked_space || controller.checked_space.x != x || controller.checked_space.y != y) {\n            controller.helper.moves_for(space);\n          }\n          if (space.piece && space.piece == controller.side) {\n            controller.current_space = space;\n            return true;\n          } else {\n            controller.clear_space();\n            return false;\n          }\n        }\n      }\n    );\n  }\n\n  check_move(x, y) {\n    var target_space = this.game.board.space(x, y);\n    if (this.current_space && target_space) {\n      var moves = this.helper.moves_for(this.current_space);\n      var move = moves.find(move => move.x == x && move.y == y);\n      if (move) {\n        if (this.side == 'd') {\n          var kills;\n          var targets = [];\n          if (move.type == 'hurl') {\n            kills = 1;\n            targets = [{x: target_space.x, y: target_space.y}]\n          } else if (move.type == 'walk') {\n            kills = 0;\n          }\n          move.side = 'd';\n          this.game.report('highlight_move', move);\n          return {valid: true, type: move.type, kills: kills, targets: targets};\n        } else if (this.side == 't') {\n          move.side = 't';\n          move.targets = target_space.neighbours\n            .filter(neighbour => neighbour.is_dwarf())\n            .map(dwarf => ({x: dwarf.x, y: dwarf.y}));\n          this.game.report('highlight_move', move);\n          return {valid: true, type: move.type, kills: move.targets.length, targets: move.targets};\n        } else {\n          return {valid: false, type: null, kills: 0, targets: []};\n        }\n      } else {\n        return {valid: false, type: null, kills: 0, targets: []};\n      }\n    }\n  }\n\n  move(x, y) {\n    var controller = this;\n    return controller.wrapper(\n      () => {\n        var target = controller.checked_space.moves.find(\n          space => space.x == x && space.y == y\n        );\n        if (target) {\n\n          controller.game.move_piece(target.x, target.y, target.type);\n          if (this.side == 't') {\n            controller.helper.troll_swing(target.x, target.y);\n          }\n          controller.game.previous_move = {\n            from: {x: controller.current_space.x, y: controller.current_space.y},\n            to: {x: target.x, y: target.y},\n            side: controller.side,\n            type: target.type,\n            killed: target.kills\n          }\n          controller.clear_space();\n          controller.game.end_turn();\n          return true;\n        } else {\n          controller.clear_space();\n          return false;\n        }\n      }\n    );\n  }\n\n  clear_space() {\n    this.current_space = null;\n    this.checked_space = null;\n    this.game.report('board_state');\n  }\n\n  declare(game_over) {\n    this.declared = game_over;\n    this.game.report('player_declared', {side: this.side, game_over: game_over});\n    /*\n    if (this.opponent_declared()) {\n      this.game.end_turn();\n    }\n     */\n  }\n\n  opponent_declared() {\n    if (this.side == 'd') {\n      return this.game.troll_controller.declared;\n    } else if (this.side == 't') {\n      return this.game.dwarf_controller.declared;\n    }\n  }\n\n\n  wrapper(func) {\n    if (this.game.current_side == this.side) {\n      return func();\n    } else {\n      return null;\n    }\n  }\n\n  turn_cached(key, func) {\n    if(this.turn_cache.turn != this.turn()) {\n      this.turn_cache = {turn: this.turn()};\n    }\n    if (this.turn_cache[key]) {\n      return this.turn_cache[key];\n    } else {\n      var value = func.call();\n      this.turn_cache[key] = value;\n      return value;\n    }\n  }\n\n\n}\n\nmodule.exports = Controller;\n\n//# sourceURL=webpack://Game/./src/lib/controller.js?");

/***/ }),

/***/ "./src/lib/controller_helper.js":
/*!**************************************!*\
  !*** ./src/lib/controller_helper.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const MoveCalculator = __webpack_require__(/*! ./move_calculator.js */ \"./src/lib/move_calculator.js\");\nconst Utils = __webpack_require__(/*! ./utils.js */ \"./src/lib/utils.js\");\n\nclass ControllerHelper {\n\n  constructor(controller, game) {\n    this.controller = controller;\n    this.side = controller.side;\n    this.game = game;\n  }\n\n  board() {\n    return this.game.board;\n  }\n\n  space_proxy(space) {\n    if (space) {\n      var piece\n      if (space.piece) {\n        piece = space.piece.type\n      } else {\n        piece = null\n      }\n      return {\n        x: space.x,\n        y: space.y,\n        piece: piece\n      }\n    } else {\n      return null;\n    }\n  }\n\n  moves_for(space) {\n    //var move_calculator = new MoveCalculator(this.board(), space, this.game.current_side);\n    var space_info = this.controller.space_info(space.x, space.y)\n    this.controller.checked_space = {\n      x: space.x,\n      y: space.y,\n      moves: space_info.moves,\n      in_danger: space_info.in_danger\n    };\n    return space_info.moves;\n  }\n\n  // Troll in this space kills all adjacent dwarfs\n  troll_swing(x, y) {\n    var space = this.board().space(x, y);\n    var nearby_dwarfs = space.neighbours.filter(neighbour => neighbour.is_dwarf());\n    nearby_dwarfs.forEach(dwarf => {\n      this.game.report('piece_taken', Object.assign(dwarf, {side: 'd'}));\n      this.game.remove_piece(dwarf);\n    });\n  }\n\n  space_info(x, y) {\n    var space = this.board().space(x, y);\n    if (space) {\n      space = this.space_proxy(space);\n      var move_calculator = new MoveCalculator(this.board(), space, space.piece);\n      space.moves = move_calculator.moves;\n      space.safe_moves = move_calculator.safe_moves;\n      space.nearest_dwarf = this.nearest(x, y, 'd');\n      space.nearest_troll = this.nearest(x, y, 't');\n      if (this.side == 't') {\n        space.in_danger = MoveCalculator.in_danger_from_dwarfs(space, MoveCalculator.get_all_hurls(this.game))\n      } else if (this.side == 'd') {\n        space.in_danger = MoveCalculator.in_danger_from_trolls(space, MoveCalculator.get_all_shoves(this.game), this.game)\n      } else {\n        space.in_danger = false;\n      }\n      return space;\n    } else {\n      return null;\n    }\n  }\n\n  nearest(x, y, side) {\n    var helper = this;\n    var distance = 0;\n    var found_pieces = [];\n    do {\n      distance += 1;\n      var box = Utils.distance_box(x, y, distance);\n      found_pieces = box.filter(coord => {\n        var space = helper.board().space(coord.x, coord.y)\n        return space && space.piece && space.piece.type == side;\n      });\n    } while (found_pieces.length == 0 && distance < 15);\n    return {\n      distance: distance,\n      pieces: found_pieces\n    }\n  }\n\n}\n\nmodule.exports = ControllerHelper;\n\n\n//# sourceURL=webpack://Game/./src/lib/controller_helper.js?");

/***/ }),

/***/ "./src/lib/controller_utils.js":
/*!*************************************!*\
  !*** ./src/lib/controller_utils.js ***!
  \*************************************/
/***/ ((module) => {

eval("var ControllerUtils = {\n  // Source and target, must have x and y{\n  distance_between: function (source, target) {\n    var x_dist = Math.abs(source.x - target.x);\n    var y_dist = Math.abs(source.y - target.y);\n    return x_dist + y_dist;\n  },\n\n  // All spaces, and target, must have x and ytemplate.js\n  farthest_from(spaces, target) {\n    spaces.forEach((move) => {\n      move.distance = ControllerUtils.distance_between(move, target);\n    });\n    return spaces.sort((a, b) => {\n      return b.distance - a.distance\n    })[0];\n  },\n\n  // All spaces, and target, must have x and y\n  closest_to(spaces, target) {\n    spaces.forEach((move) => {\n      move.distance = ControllerUtils.distance_between(move, target);\n    });\n    return spaces.sort((a, b) => {\n      return a.distance - b.distance\n    })[0];\n  }\n}\n\nmodule.exports = ControllerUtils;\n\n//# sourceURL=webpack://Game/./src/lib/controller_utils.js?");

/***/ }),

/***/ "./src/lib/direction.js":
/*!******************************!*\
  !*** ./src/lib/direction.js ***!
  \******************************/
/***/ ((module) => {

eval("class Direction {\n\n  constructor(board, compass_point, x, y) {\n    this.board = board;\n    this.x = x;\n    this.y = y;\n    this.step = this.get_step(compass_point.toUpperCase());\n    this.spaces = this.get_spaces();\n  }\n\n  get_step(compass_point) {\n    var step = [0, 0];\n    if (compass_point.includes('S')) {\n      step[1] = 1;\n    } else if (compass_point.includes('N')) {\n      step[1] = -1;\n    }\n    if (compass_point.includes('E')) {\n      step[0] = 1;\n    } else if (compass_point.includes('W')) {\n      step[0] = -1;\n    }\n    return step;\n  }\n\n  get_spaces() {\n    var x = this.x;\n    var y = this.y;\n    var spaces = [];\n\n    var space = this.board.space(x, y);\n    while (space) {\n      spaces.push(space);\n      x += this.step[0];\n      y += this.step[1];\n      space = this.board.space(x, y);\n    }\n    return spaces;\n  }\n\n  empty_spaces() {\n    var found_spaces = [];\n    var i = 1\n    var space = this.spaces[i];\n    while(space && !space.piece) {\n      found_spaces.push(space);\n      i += 1\n      space = this.spaces[i];\n    }\n    return found_spaces;\n  }\n\n  // d or t in a line, including this one\n  pieces_in_line(type) {\n    var i = 0;\n    var space = this.spaces[i];\n    while(space && space.piece && space.piece.type == type) {\n      i += 1\n      var space = this.spaces[i];\n    }\n    return i;\n  }\n\n  first_piece() {\n    var space = this.spaces.find(space => space.piece);\n    if(space) {\n      return space.piece;\n    } else {\n      return null;\n    }\n  }\n\n}\n\nmodule.exports = Direction;\n\n\n//# sourceURL=webpack://Game/./src/lib/direction.js?");

/***/ }),

/***/ "./src/lib/modal.js":
/*!**************************!*\
  !*** ./src/lib/modal.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Clients = __webpack_require__(/*! ./../clients.js */ \"./src/clients.js\");\nconst Utils = __webpack_require__(/*! ./utils.js */ \"./src/lib/utils.js\");\nconst ClientValidator = __webpack_require__(/*! ./client_validator.js */ \"./src/lib/client_validator.js\");\n\nclass Modal {\n  constructor(game) {\n    this.game = game;\n    this.background = document.getElementById('modal_background');\n    this.modal_div = document.getElementById('modal');\n    this.validating = false;\n  }\n\n  show_form() {\n    this.build_form();\n    this.background.style.width = `${window.innerWidth}px`;\n    this.background.style.height = `${window.innerHeight}px`;\n    this.background.style.display = 'block';\n\n    this.modal_div.style.width = '300px';\n    this.modal_div.style.height = '200px';\n    this.modal_div.style.top = `110px`;\n    this.modal_div.style.left = `${((window.innerWidth - 300) / 2) - 20}px`;\n\n    this.modal_div.style.display = 'block';\n    this.show_or_hide_edit();\n  }\n\n  hide_form() {\n    this.background.style.display = 'none';\n    this.modal_div.style.display = 'none';\n  }\n\n  build_form() {\n    this.modal_div.innerHTML = '';\n\n    var title = Utils.build_element('h2');\n    title.innerHTML = 'Customise Game';\n    this.modal_div.append(title);\n    this.form = Utils.build_element('form');\n    Utils.addListener(this.form, 'submit', (e) => {\n      this.submit_form(e, this)\n    });\n    this.build_client_select('Dwarf', this.game.dwarf_client_name, ['dwarf']);\n    this.build_client_select('Troll', this.game.troll_client_name, ['troll']);\n    this.build_speed_select();\n    this.build_submit();\n    this.build_close_link();\n    this.modal_div.append(this.form);\n  }\n\n  build_client_select(label_text, current_client_name, groups) {\n    var label = Utils.build_element('label', {for: 'label'});\n    label.innerHTML = label_text;\n    this.form.append(label);\n    var select = Utils.build_element('select', {name: label_text, class: 'client_select'});\n    var optgroups = {};\n    Object.keys(Clients).forEach((client_name) => {\n      this.build_client_option(select, optgroups, client_name, current_client_name, groups);\n    });\n    Object.values(optgroups).forEach((optgroup) => {\n      select.append(optgroup);\n    });\n    this.form.append(select);\n    select.addEventListener('change', this.show_or_hide_edit);\n\n    var edit_link = Utils.build_element('a', {href: '#'}, {float: 'right'});\n    edit_link.innerHTML = 'Edit';\n    edit_link.addEventListener('mouseup', this.open_edit_form)\n    this.form.append(edit_link);\n\n    this.form.append(Utils.build_element('br', {clear: 'both'}));\n    this.form.append(Utils.build_element('br', {clear: 'both'}));\n  }\n\n  show_or_hide_edit() {\n    Array.from(document.getElementsByClassName('client_select')).forEach((select) => {\n      if (select.value == 'inert/manual') {\n        select.nextSibling.style.display = 'none';\n      } else {\n        select.nextSibling.style.display = 'block';\n      }\n    });\n  }\n\n  build_client_option(select, optgroups, client_path, current_client_name, groups) {\n    var parts = client_path.split('/');\n    var group_name = parts[0]\n    var user_name = parts[parts.length - 2];\n    var client_name = parts[parts.length - 1];\n    if (!(groups.includes(group_name) || client_path == 'inert/manual')) {\n      return;\n    }\n    var optgroup = optgroups[user_name];\n    if (!optgroup) {\n      optgroup = Utils.build_element('optgroup', {label: user_name});\n      optgroups[user_name] = optgroup;\n    }\n    var option = Utils.build_element('option', {value: client_path});\n    if (client_path == current_client_name) {\n      option.setAttribute('selected', 'true');\n    }\n    option.innerHTML = client_name;\n    optgroup.append(option);\n  }\n\n  build_speed_select() {\n    var label = Utils.build_element('label', {for: 'label'});\n    label.innerHTML = 'Turn Time (ms)';\n    this.form.append(label);\n    var select = Utils.build_element('select', {name: 'speed'});\n    [0, 10, 50, 100, 200, 500, 1000].forEach((opt) => {\n      var option = Utils.build_element('option', {value: opt});\n      if (opt == 200) {\n        option.setAttribute('selected', 'true');\n      }\n      option.innerHTML = opt;\n      select.append(option);\n    });\n    this.form.append(select);\n    this.form.append(Utils.build_element('br', {clear: 'both'}));\n    this.form.append(Utils.build_element('br', {clear: 'both'}));\n  }\n\n  build_submit() {\n    this.submit_button = Utils.build_element('input', {type: 'submit', value: 'Run Game'})\n    this.form.append(this.submit_button);\n  }\n\n  build_close_link() {\n    var modal = this;\n    this.close_link = Utils.build_element('a', {href: '#'}, {float: 'right'});\n    this.close_link.innerHTML = 'Close';\n    this.close_link.addEventListener('mouseup', (e) => {\n      e.preventDefault();\n      modal.hide_form();\n    });\n    this.form.append(this.close_link);\n  }\n\n  submit_form(e, modal) {\n    e.preventDefault();\n    var form_data = new FormData(modal.form);\n    game.reinit(\n      form_data.get('Dwarf'),\n      form_data.get('Troll'),\n      form_data.get('speed')\n    )\n    modal.hide_form();\n  }\n\n  open_edit_form(e) {\n    e.preventDefault();\n    var form_data = new FormData(modal.form);\n    game.dwarf_client_name = form_data.get('Dwarf');\n    game.troll_client_name = form_data.get('Troll');\n\n    var client_name = e.currentTarget.previousElementSibling.value;\n\n    modal.background.style.width = `${window.innerWidth}px`;\n    modal.background.style.height = `${window.innerHeight}px`;\n    modal.background.style.display = 'block';\n\n    modal.modal_div.style.width = '700px';\n    modal.modal_div.style.top = '50px';\n    modal.modal_div.style.height = `${window.innerHeight - 150}px`;\n    modal.modal_div.style.left = `${((window.innerWidth - 700) / 2) - 20}px`;\n\n    modal.modal_div.style.display = 'block';\n    modal.build_edit_form(client_name);\n  }\n\n  build_edit_form(client_name) {\n    this.modal_div.innerHTML = '';\n    var title = Utils.build_element('h2');\n    title.innerHTML = `Edit ${client_name}`;\n    this.modal_div.append(title);\n\n    var hidden_field = Utils.build_element(\n      'input',\n      {name: 'client_name', value: client_name},\n      {display: 'none'}\n    );\n    this.modal_div.append(hidden_field);\n\n    var area = Utils.build_element(\n      'textarea',\n      {name: 'client_body'},\n      {\n        width: `${this.modal_div.offsetWidth - 45}px`,\n        height: `${this.modal_div.offsetHeight - 150}px`\n      }\n    );\n    area.value = Clients[client_name].toString();\n    area.addEventListener('keyup', () => {\n      this.validate_client()\n    });\n    this.modal_div.append(area);\n\n    var apply_button = Utils.build_element('div', {class: 'button'}, {float: 'left'});\n    apply_button.innerHTML = 'Apply';\n    apply_button.addEventListener('mouseup', this.apply_edit_form);\n    this.modal_div.append(apply_button);\n\n    var close_button = Utils.build_element('div', {class: 'button'}, {float: 'right'});\n    close_button.innerHTML = 'Close';\n    close_button.addEventListener('mouseup', () => {\n      this.show_form();\n    });\n    this.modal_div.append(close_button);\n\n    this.validate_button = Utils.build_element('div', {class: 'button'}, {float: 'right'});\n    this.validate_button.innerHTML = 'Validate';\n    this.validate_button.title = 'Press F12 to see more details in the developer console';\n    this.validate_button.addEventListener('mouseup', () => {\n      this.validate_client();\n    });\n\n    this.modal_div.append(this.validate_button);\n\n    var copy_button = Utils.build_element('div', {class: 'button'}, {float: 'right'});\n    copy_button.innerHTML = 'Copy';\n    copy_button.addEventListener('mouseup', this.copy_edit_form);\n    this.modal_div.append(copy_button);\n  }\n\n  validate_client() {\n    if (this.validating) {\n      this.validate_again = true;\n    } else {\n      this.validate_again = false;\n      this.validating = true;\n      var client_name = document.getElementsByName('client_name')[0].value;\n      var client_body_field = document.getElementsByName('client_body')[0]\n      var client_body = client_body_field.value;\n      var validator = new ClientValidator(client_body, client_name);\n      console.clear();\n      if (validator.valid) {\n        this.validate_button.classList.remove('red');\n        this.validate_button.classList.add('green');\n        console.log(\"%c Client valid!\", 'color: #009900')\n      } else {\n        this.validate_button.classList.remove('green');\n        this.validate_button.classList.add('red');\n\n        console.log(\"%c Client invalid:\", 'color: #FF0000')\n        validator.errors.forEach((error) => {\n          console.log(`%c ${error}`, 'color: #FF0000')\n        });\n      }\n      if (validator.messages.length > 0) {\n        console.log(\"Messages:\")\n        validator.messages.forEach((message) => {\n          console.log(message);\n        });\n      }\n      this.validating = false;\n      if (this.validate_again) {\n        this.validate_client();\n      }\n    }\n  }\n\n  copy_edit_form() {\n    var client_body_field = document.getElementsByName('client_body')[0]\n    var client_body = client_body_field.value;\n    var full_client_body = `module.exports = ${client_body_field.value}`;\n\n    client_body_field.value = full_client_body;\n    client_body_field.select();\n    client_body_field.setSelectionRange(0, 9999999);\n    document.execCommand('copy');\n    client_body_field.value = client_body;\n  }\n\n  apply_edit_form() {\n    var client_name = document.getElementsByName('client_name')[0].value;\n    var client_body = document.getElementsByName('client_body')[0].value;\n    try {\n      var kls = eval(`window.kls = ${client_body}`);\n      Clients[client_name] = kls;\n      modal.show_form();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nmodule.exports = Modal;\n\n//# sourceURL=webpack://Game/./src/lib/modal.js?");

/***/ }),

/***/ "./src/lib/move_calculator.js":
/*!************************************!*\
  !*** ./src/lib/move_calculator.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./utils.js */ \"./src/lib/utils.js\");\nconst Space = __webpack_require__(/*! ../models/space.js */ \"./src/models/space.js\");\n\nclass MoveCalculator {\n\n  constructor(board, space, side) {\n    this.board = board;\n    this.side = side;\n    // game is set for Space, but not space_proxy\n    this.space = ((space instanceof Space) ? space : this.board.space(space.x, space.y));\n    if (this.space && this.space.piece && this.space.piece.type == side) {\n      if (side == 'd') {\n        this.moves = this.dwarf_moves();\n      } else if (side == 't') {\n        this.moves = this.troll_moves();\n      } else {\n        this.moves = [];\n      }\n      this.safe_moves = this.moves.filter(move => !move.in_danger)\n    } else {\n      this.moves = [];\n      this.safe_moves = [];\n    }\n  }\n\n  dwarf_moves() {\n    var calculator = this;\n    var moves = [];\n    var shoves = MoveCalculator.get_all_shoves(this.board.game);\n    Object.values(calculator.space.directions).forEach(\n      direction => {\n        direction.empty_spaces().forEach(empty_space => moves.push({\n          x: empty_space.x,\n          y: empty_space.y,\n          type: 'walk',\n          kills: 0,\n          in_danger: MoveCalculator.in_danger_from_trolls(empty_space, shoves, this.space.game)\n        }));\n        MoveCalculator.get_hurls(direction).forEach(hurl => {\n          moves.push({\n            x: hurl.x,\n            y: hurl.y,\n            type: 'hurl',\n            kills: 1,\n            in_danger: MoveCalculator.in_danger_from_trolls(hurl, shoves, this.space.game)\n          });\n        });\n      }\n    );\n\n    return moves;\n  }\n\n  static get_hurls(direction, hypothetical = false) {\n    var hurl_distance = direction.opposite.pieces_in_line('d');\n    var hurls = [];\n    direction.spaces.slice(1, (hurl_distance + 1)).forEach(\n      (space, index) => {\n        if (((hypothetical && index >= 1) || space.is_troll()) && MoveCalculator.space_between_is_empty(direction, (index - 1))) {\n          hurls.push(space);\n        }\n      }\n    )\n    return hurls;\n  }\n\n  static in_danger_from_trolls(space, shoves, game) {\n    var in_danger = false;\n    game.trolls.forEach(troll => {\n      var distance = Utils.distance_between(space, troll);\n      if (!in_danger && distance >= 1 && distance <= 2) {\n        in_danger = true;\n      }\n    });\n    shoves.forEach(shove => {\n      var distance = Utils.distance_between(space, shove);\n      if (!in_danger && distance == 1) {\n        in_danger = true;\n      }\n    });\n    return in_danger;\n  }\n\n  troll_moves() {\n    var calculator = this;\n    var moves = [];\n    var hurls = MoveCalculator.get_all_hurls(this.board.game);\n    calculator.space.neighbours.filter(\n      neighbour => neighbour.is_empty()\n    ).forEach(\n      neighbour => {\n        var kills = neighbour.neighbours_of_type('d');\n        moves.push(\n          {\n            x: neighbour.x,\n            y: neighbour.y,\n            type: 'walk',\n            kills: kills,\n            in_danger: MoveCalculator.in_danger_from_dwarfs(neighbour, hurls)\n          }\n        );\n      }\n    );\n    Object.values(calculator.space.directions).forEach((direction) => {\n      MoveCalculator.get_shoves(direction).forEach((shove) => {\n        var kills = shove.neighbours_of_type('d');\n        if (shove.is_dwarf()) {\n          kills += 1;\n        }\n        moves.push(\n          {\n            x: shove.x,\n            y: shove.y,\n            type: 'shove',\n            kills: kills,\n            in_danger: MoveCalculator.in_danger_from_dwarfs(shove, hurls)\n          }\n        );\n      });\n    });\n    return moves;\n  }\n\n  static in_danger_from_dwarfs(space, hurls) {\n    var in_danger = false;\n    hurls.forEach(hurl => {\n      if (!in_danger && Utils.distance_between(space, hurl) == 0) {\n        in_danger = true;\n      }\n    });\n    return in_danger;\n  }\n\n  static get_all_hurls(game) {\n    var all_hurls = [];\n    game.dwarfs.forEach(dwarf => {\n      var space = game.board.space(dwarf.x, dwarf.y);\n      Object.values(space.directions).forEach(direction => {\n        all_hurls.push(MoveCalculator.get_hurls(direction, true))\n      });\n    });\n    return all_hurls.flat();\n  }\n\n  static get_all_shoves(game) {\n    var all_shoves = [];\n    game.trolls.forEach(troll => {\n      var space = game.board.space(troll.x, troll.y);\n      Object.values(space.directions).forEach(direction => {\n        all_shoves.push(MoveCalculator.get_shoves(direction, true))\n      });\n    });\n    return all_shoves.flat();\n  }\n\n  static get_shoves(direction, hypothetical = false) {\n    var shoves = [];\n    var shove_distance = direction.opposite.pieces_in_line('t');\n    direction.spaces.slice(2, shove_distance + 1).forEach(\n      (space, index) => {\n        if (\n          space.is_empty() &&\n          (\n            MoveCalculator.space_between_is_empty(direction, index) &&\n            (hypothetical || MoveCalculator.space_has_dwarf_neighours(space))\n          )\n        ) {\n          shoves.push(space);\n        }\n      }\n    );\n    return shoves;\n  }\n\n  static space_between_is_empty(direction, index) {\n    return direction.spaces.slice(1, (index + 2)).every(space => space.is_empty());\n  }\n\n  static space_has_dwarf_neighours(space) {\n    return space.neighbours_of_type('d') > 0;\n  }\n}\n\nmodule.exports = MoveCalculator;\n\n//# sourceURL=webpack://Game/./src/lib/move_calculator.js?");

/***/ }),

/***/ "./src/lib/utils.js":
/*!**************************!*\
  !*** ./src/lib/utils.js ***!
  \**************************/
/***/ ((module) => {

eval("Utils = {\n  build_element: (name, attrs = {}, style = {}) => {\n    var el = document.createElement(name);\n    Object.entries(attrs).forEach(attr => el.setAttribute(attr[0], attr[1]))\n    if (Object.keys(style).length > 0) {\n      Object.entries(style).forEach(style_rule => el.style[style_rule[0]] = style_rule[1]);\n    }\n    return el;\n  },\n\n  _eventHandlers: {},\n\n  addListener: (node, event, handler, capture = false) => {\n    if (!(event in Utils._eventHandlers)) {\n      Utils._eventHandlers[event] = [];\n    }\n    // here we track the events and their nodes (note that we cannot\n    // use node as Object keys, as they'd get coerced into a string\n    Utils._eventHandlers[event].push({node: node, handler: handler, capture: capture})\n    node.addEventListener(event, handler, capture)\n  },\n\n\n  removeAllListeners: (targetNode, event) => {\n    // remove listeners from the matching nodes\n    Utils._eventHandlers[event]\n      .filter(({node}) => node === targetNode)\n      .forEach(({node, handler, capture}) => node.removeEventListener(event, handler, capture))\n\n    // update _eventHandlers global\n    Utils._eventHandlers[event] = Utils._eventHandlers[event].filter(\n      ({node}) => node !== targetNode,\n    )\n  },\n\n  remove_from_array: (array, object) => {\n    if (array.includes(object)) {\n      array.splice(array.indexOf(object), 1);\n    }\n  },\n\n  nullify_from_array: (array, object) => {\n    if (array.includes(object)) {\n      array[array.indexOf(object)] = null;\n    }\n  },\n\n  distance_box: (x, y, distance) => {\n    var coords = [];\n    var first_row = y - distance;\n    var last_row = y + distance;\n    Utils.index_array((distance * 2) + 1).forEach((idx) => {\n      coords.push({x: (x - idx + distance), y: first_row});\n    });\n    Utils.index_array((distance * 2) - 1).forEach((idx) => {\n      coords.push({x: (x - distance), y: (first_row + idx + 1)});\n      coords.push({x: (x + distance), y: (first_row + idx + 1)});\n    });\n    Utils.index_array((distance * 2) + 1).forEach((idx) => {\n      coords.push({x: (x - idx + distance), y: last_row});\n    });\n    return coords;\n  },\n\n  index_array: (size) => {\n    return Array.from(new Array(size), (_, i) => {\n      return i;\n    });\n  },\n\n  // Source and target both respond to x and y.\n  distance_between(source, target) {\n    var x_dist = Math.abs(source.x - target.x);\n    var y_dist = Math.abs(source.y - target.y);\n    return Math.max(x_dist, y_dist);\n  }\n};\n\nmodule.exports = Utils;\n\n\n//# sourceURL=webpack://Game/./src/lib/utils.js?");

/***/ }),

/***/ "./src/models/board.js":
/*!*****************************!*\
  !*** ./src/models/board.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Space = __webpack_require__(/*! ./space.js */ \"./src/models/space.js\"); \n\nclass Board {\n\n  static layout = [\n    \"#####dd dd#####\",\n    \"####d     d####\",\n    \"###d       d###\",\n    \"##d         d##\",\n    \"#d           d#\",\n    \"d             d\",\n    \"d     ttt     d\",\n    \"      t#t      \",\n    \"d     ttt     d\",\n    \"d             d\",\n    \"#d           d#\",\n    \"##d         d##\",\n    \"###d       d###\",\n    \"####d     d####\",\n    \"#####dd dd#####\"\n  ]\n\n  constructor(game) {\n    var board = this;\n    board.game = game;\n    board.build_spaces();\n    this.reporters = [];\n  }\n\n  build_spaces() {\n    var board = this;\n    board.rows = [];\n    Board.layout.forEach(\n      (row, row_index) => {\n        board.rows[row_index] = [];\n        row.split('').forEach(\n          (char, column_index) => {\n            if (char != '#') {\n              board.rows[row_index][column_index] = new Space(board.game, board, row_index, column_index, char);\n            }\n          }\n        )\n      }\n    );\n    // It's important this is after all spaces are initialised!\n    board.rows.forEach(\n      row => {\n        row.forEach(space => {\n          space.get_directions();\n          space.get_neighbours();\n        })\n      }\n    );\n\n    board.spaces = [];\n    board.rows.forEach(\n      row => board.spaces = board.spaces.concat(row.filter(Boolean))\n    );\n  }\n\n  space(x, y) {\n    return this.rows[y] ? this.rows[y][x] : null;\n  }\n\n\n}\n\nmodule.exports = Board;\n\n//# sourceURL=webpack://Game/./src/models/board.js?");

/***/ }),

/***/ "./src/models/game.js":
/*!****************************!*\
  !*** ./src/models/game.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Controller = __webpack_require__(/*! ./../lib/controller.js */ \"./src/lib/controller.js\");\nconst Board = __webpack_require__(/*! ./board.js */ \"./src/models/board.js\");\nconst Reporters = __webpack_require__(/*! ../reporters.js */ \"./src/reporters.js\");\nconst Clients = __webpack_require__(/*! ../clients.js */ \"./src/clients.js\");\nconst Utils = __webpack_require__(/*! ./../lib/utils.js */ \"./src/lib/utils.js\");\nconst ControllerUtils = __webpack_require__(/*! ./../lib/controller_utils.js */ \"./src/lib/controller_utils.js\");\n\nclass Game {\n\n  static max_game_length = 500;\n\n  constructor(attrs) {\n    this.initialise_properties(attrs);\n    this.init_board();\n    this.init_reporters(attrs);\n    this.init_clients(attrs);\n    this.report('score');\n    this.current_side = 'd';\n    this.turn();\n  }\n\n  reinit(dwarf_client, troll_client, delay = 0) {\n    this.initialise_properties({delay: delay});\n    this.init_board();\n    this.reporters.forEach((reporter) => {\n      reporter.reinit();\n    });\n    this.init_clients({dwarf_client: dwarf_client, troll_client: troll_client});\n    this.report('score');\n    this.current_side = 'd';\n    this.turn();\n  }\n\n  init_board() {\n    this.board = new Board(this);\n  }\n\n  initialise_properties(attrs) {\n    this.delay = attrs.delay || 0;\n    this.dwarfs = [];\n    this.trolls = [];\n    this.indexed_dwarfs = [];\n    this.indexed_trolls = [];\n    this.turn_number = 0;\n    this.dwarf_controller = new Controller(this, 'd');\n    this.troll_controller = new Controller(this, 't');\n    this.previous_move = {\n      side: '?',\n      from: {x: 0, y: 0},\n      to: {x: 0, y: 0},\n      type: 'game_start',\n      killed: 0\n    }\n\n  }\n\n  init_reporters(attrs) {\n    var game = this;\n    game.reporters = []\n    if (attrs.reporters) {\n      attrs.reporters.forEach(\n        reporter_name => game.attach_reporter(reporter_name)\n      );\n    }\n  }\n\n  attach_reporter(name) {\n    this.reporters.push(new Reporters[name](this));\n  }\n\n  report(event, args = {}) {\n    this.reporters.forEach(reporter => {\n        if (reporter[event]) {\n          reporter[event](args)\n        }\n      }\n    );\n  }\n\n  init_clients(attrs) {\n    this.dwarf_client_name = attrs.dwarf_client;\n    this.troll_client_name = attrs.troll_client;\n    this.clients = {\n      d: this.init_client(attrs.dwarf_client, this.dwarf_controller),\n      t: this.init_client(attrs.troll_client, this.troll_controller)\n    }\n  }\n\n  init_client(client_type, controller) {\n    if (typeof client_type == 'string') {\n      var client_class = Clients[client_type];\n      var client = new client_class(controller, Object.assign({}, ControllerUtils));\n      // belt, meet braces\n      client.controller = controller;\n      return client\n    } else {\n      var client = new client_type(controller, Object.assign({}, ControllerUtils));\n      // belt, meet braces\n      client.controller = controller;\n      return client\n    }\n  }\n\n  get_score() {\n    var dwarf_score = this.dwarfs.length\n    var troll_score = (this.trolls.length * 4)\n    var winning = ((dwarf_score > troll_score) ? 'd' : 't')\n    if (dwarf_score == troll_score) {\n      winning = '?'\n    }\n    return {\n      dwarfs: dwarf_score,\n      trolls: troll_score,\n      difference: Math.abs(dwarf_score - troll_score),\n      winning: winning\n    }\n  }\n\n  turn() {\n    this.turn_number += 1;\n    this.report('turn_starts', {side: this.current_side, turn: this.turn_number})\n    this.current_client().turn();\n  }\n\n  end_turn() {\n    this.current_client().end_turn();\n    this.swap_side();\n    this.report('board_state');\n    this.report('score');\n    var ending = this.check_ending_conditions();\n    if (ending) {\n      this.end_reason = ending.reason;\n      this.report('game_ended', ending);\n    } else {\n      if (this.delay && this.delay > 0) {\n        console.log(this.delay)\n        setTimeout(() => {\n          this.turn()\n        }, this.delay);\n      } else {\n        this.turn();\n      }\n    }\n  }\n\n  current_client() {\n    return this.clients[this.current_side];\n  }\n\n  current_controller() {\n    return this.current_client().controller;\n  }\n\n  swap_side() {\n    this.current_side = (this.current_side == 'd') ? 't' : 'd';\n  }\n\n  // move current piece (from select_space) to x, y\n  move_piece(x, y, type) {\n    var from = this.board.space(\n      this.current_client().controller.current_space.x,\n      this.current_client().controller.current_space.y\n    );\n    var to = this.board.space(x, y);\n    this.report(\n      'move',\n      {\n        side: from.piece.type,\n        from: {x: from.x, y: from.y},\n        to: {x: to.x, y: to.y},\n        type: type\n      }\n    )\n    if (to.piece) {\n      this.report('piece_taken', {x: to.x, y: to.y, side: to.piece.type});\n      this.remove_piece(to);\n    }\n    to.piece = from.piece;\n    from.piece = null;\n    to.piece.x = to.x;\n    to.piece.y = to.y;\n  }\n\n  remove_piece(space) {\n    Utils.remove_from_array(this.trolls, space.piece);\n    Utils.remove_from_array(this.dwarfs, space.piece);\n    Utils.nullify_from_array(this.indexed_trolls, space.piece);\n    Utils.nullify_from_array(this.indexed_dwarfs, space.piece);\n    space.piece = null;\n  }\n\n  check_ending_conditions() {\n    if (this.turn_number >= Game.max_game_length) {\n      return {reason: 'Timeout'}\n    } else if (this.dwarfs.length == 0) {\n      return {reason: 'No more dwarfs'}\n    } else if (this.trolls.length == 0) {\n      return {reason: 'No more trolls'}\n    } else if (this.troll_controller.declared && this.dwarf_controller.declared) {\n      return {reason: 'Players agreed to finish'}\n    }\n\n  }\n}\n\nmodule.exports = Game;\n\n//# sourceURL=webpack://Game/./src/models/game.js?");

/***/ }),

/***/ "./src/models/piece.js":
/*!*****************************!*\
  !*** ./src/models/piece.js ***!
  \*****************************/
/***/ ((module) => {

eval("class Piece {\n  constructor(game, x, y, type) {\n    this.game = game;\n    this.type = type;\n    this.x = x;\n    this.y = y;\n    if (this.is_dwarf()) {\n      this.game.dwarfs.push(this);\n      this.game.indexed_dwarfs.push(this);\n    } else if (this.is_troll()) {\n      this.game.trolls.push(this);\n      this.game.indexed_trolls.push(this);\n    }\n  }\n\n  is_dwarf() {\n    return this.type == 'd';\n  }\n\n  is_troll() {\n    return this.type == 't';\n  }\n}\n\nmodule.exports = Piece;\n\n//# sourceURL=webpack://Game/./src/models/piece.js?");

/***/ }),

/***/ "./src/models/space.js":
/*!*****************************!*\
  !*** ./src/models/space.js ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Direction = __webpack_require__(/*! ./../lib/direction.js */ \"./src/lib/direction.js\");\nconst Piece = __webpack_require__(/*! ./piece.js */ \"./src/models/piece.js\");\n\n\nclass Space {\n\n  static direction_list = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n\n  constructor(game, board, row_index, column_index, piece) {\n    this.game = game;\n    this.board = board;\n    this.x = column_index;\n    this.y = row_index;\n    this.colour_index = ((this.x + this.y) % 2);\n    switch (piece) {\n      case 'd':\n        this.piece = new Piece(this.game, this.x, this.y, 'd');\n        break;\n      case 't':\n        this.piece = new Piece(this.game, this.x, this.y, 't');\n        break;\n    }\n  }\n\n  get_directions() {\n    var space = this;\n    space.directions = {};\n    Space.direction_list.forEach(\n      compass_point => {\n        space.directions[compass_point] = new Direction(\n          space.board,\n          compass_point,\n          space.x,\n          space.y\n        )\n      }\n    );\n    Object.values(space.directions).forEach(\n       (direction, index) => {\n        direction.opposite = space.directions[Space.direction_list[(index + 4) % 8]];\n      }\n    );\n  }\n\n  get_neighbours() {\n    var space = this;\n    space.neighbours = [];\n    Object.values(this.directions).forEach(\n      direction => {\n        if(direction.spaces[1]) {\n          space.neighbours.push(direction.spaces[1]);\n        }\n      }\n    );\n  }\n\n  neighbours_of_type(type) {\n    return this.neighbours.filter((s) => s.piece && s.piece.type == type).length;\n  }\n\n  is_dwarf() {\n    return this.piece && this.piece.type == 'd';\n  }\n\n  is_troll() {\n    return this.piece && this.piece.type == 't';\n  }\n\n  is_empty() {\n    return !this.piece;\n  }\n\n}\n\nmodule.exports = Space;\n\n\n//# sourceURL=webpack://Game/./src/models/space.js?");

/***/ }),

/***/ "./src/reporters.js":
/*!**************************!*\
  !*** ./src/reporters.js ***!
  \**************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n  Canvas: __webpack_require__(/*! ./reporters/canvas.js */ \"./src/reporters/canvas.js\"),\n  Console: __webpack_require__(/*! ./reporters/console.js */ \"./src/reporters/console.js\"),\n  Tournament: __webpack_require__(/*! ./reporters/tournament.js */ \"./src/reporters/tournament.js\")\n};\n\n\n//# sourceURL=webpack://Game/./src/reporters.js?");

/***/ }),

/***/ "./src/reporters/canvas.js":
/*!*********************************!*\
  !*** ./src/reporters/canvas.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Utils = __webpack_require__(/*! ./../lib/utils.js */ \"./src/lib/utils.js\");\n\nclass Canvas {\n\n  static space_colours = ['lightgrey', 'darkgrey'];\n  static space_size = 40;\n  static move_colours = {\n    walk: 'yellow',\n    hurl: 'red',\n    take: 'red',\n    yello: 'red'\n  };\n\n  constructor(game) {\n    var reporter = this;\n    reporter.game = game;\n    reporter.board = game.board;\n    document.getElementById('thud').style['width'] = `${Canvas.space_size * 15}px`\n    reporter.build_overlay_canvas();\n    reporter.build_canvas();\n    reporter.build_dashboard();\n    reporter.draw_board();\n    reporter.build_declare_buttons();\n    this.build_customise_button();\n  }\n\n  reinit() {\n    document.getElementById('thud_dashboard').innerHTML = \"\";\n    document.getElementById('thud_board').innerHTML = \"\";\n    document.getElementById('buttons').innerHTML = \"\";\n    this.build_overlay_canvas();\n    this.build_canvas();\n    this.build_dashboard();\n    this.draw_board();\n    this.build_declare_buttons();\n    this.build_customise_button();\n  }\n\n  build_canvas() {\n    this.canvas = Utils.build_element(\n      'canvas',\n      {\n        height: Canvas.space_size * 15,\n        width: Canvas.space_size * 15,\n        class: 'thud_canvas'\n      },\n      {\n        'background-color': 'black',\n        'z-index': 0\n      }\n    )\n    ;\n    this.context = this.canvas.getContext('2d');\n    document.getElementById('thud_board').append(this.canvas);\n  }\n\n  build_overlay_canvas() {\n    this.overlay_canvas = Utils.build_element(\n      'canvas',\n      {\n        height: Canvas.space_size * 15,\n        width: Canvas.space_size * 15,\n        class: 'thud_canvas'\n      },\n      {\n        'z-index': 1\n      }\n    );\n    this.overlay_context = this.overlay_canvas.getContext('2d');\n    document.getElementById('thud_board').append(this.overlay_canvas);\n  }\n\n  build_dashboard() {\n    this.dashboard = document.getElementById('thud_dashboard');\n    this.dwarf_side = this.build_side('blue', 'Dwarfs');\n    this.centre = this.build_centre();\n    this.troll_side = this.build_side('green', 'Trolls');\n    this.dashboard.append(this.dwarf_side);\n    this.dashboard.append(this.centre);\n    this.dashboard.append(this.troll_side);\n  }\n\n  build_declare_buttons() {\n    this.dwarf_declare_button = Utils.build_element(\n      'div',\n      {\n        id: 'dwarf_declare_button',\n        class: 'declare_button dwarf',\n        'data-over': false\n      },\n      {float: 'left'}\n    );\n    this.dwarf_declare_button.innerHTML = 'Make Peace';\n    document.getElementById('buttons').append(this.dwarf_declare_button);\n    this.troll_declare_button = Utils.build_element(\n      'div',\n      {\n        id: 'troll_declare_button',\n        class: 'declare_button troll',\n        'data-over': false\n      },\n      {float: 'right'}\n    );\n    this.troll_declare_button.innerHTML = 'Make Peace';\n    document.getElementById('buttons').append(this.troll_declare_button);\n  }\n\n  build_customise_button() {\n    this.customise_button = Utils.build_element(\n      'div',\n      {\n        id: 'customise_button',\n        class: 'customise_button'\n      }\n    );\n    this.customise_button.innerHTML = 'Customise';\n    Utils.addListener(this.customise_button, 'mouseup', () => {\n      window.modal.show_form()\n    }, false);\n    var buttons_div = document.getElementById('buttons');\n    buttons_div.append(Utils.build_element('br', {clear: 'both'}));\n    buttons_div.append(Utils.build_element('br', {clear: 'both'}));\n    buttons_div.append(this.customise_button);\n  }\n\n  build_side(colour, title) {\n    var side = Utils.build_element(\n      'div',\n      {class: 'dashboard_panel'},\n      {\n        'background-color': colour,\n        opacity: 0.7,\n        width: `${(Canvas.space_size * 6) - 5}px`\n      }\n    );\n    side.innerHTML = title\n    return side;\n  }\n\n  build_centre() {\n    return Utils.build_element(\n      'div',\n      {class: 'dashboard_centre'},\n      {\n        width: `${Canvas.space_size * 3}px`,\n      }\n    );\n  }\n\n  draw_board() {\n    var reporter = this;\n    reporter.clear_canvas();\n    reporter.board.rows.forEach(\n      row => row.forEach(space => reporter.draw_space(space, reporter))\n    );\n    reporter.game.dwarfs.forEach(dwarf => reporter.draw_piece(dwarf, 'blue'));\n    reporter.game.trolls.forEach(troll => reporter.draw_piece(troll, 'green'));\n  }\n\n  clear_canvas() {\n    this.context.clearRect(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n  }\n\n  draw_space(space) {\n    if (space) {\n      this.context.fillStyle = Canvas.space_colours[space.colour_index];\n      this.context.fillRect(\n        Canvas.space_size * space.x,\n        Canvas.space_size * space.y,\n        Canvas.space_size,\n        Canvas.space_size\n      );\n    }\n  }\n\n  outline_space(space, colour) {\n    if (space) {\n      this.context.strokeStyle = colour;\n      this.context.lineWidth = 3;\n      this.context.strokeRect(\n        Canvas.space_size * space.x,\n        Canvas.space_size * space.y,\n        Canvas.space_size,\n        Canvas.space_size\n      );\n    }\n  }\n\n  heavy_outline_space(space, colour) {\n    if (space) {\n      this.context.strokeStyle = colour;\n      this.context.lineWidth = 5;\n      this.context.strokeRect(\n        Canvas.space_size * space.x,\n        Canvas.space_size * space.y,\n        Canvas.space_size,\n        Canvas.space_size\n      );\n    }\n  }\n\n  draw_piece(space, colour) {\n    this.context.beginPath();\n    this.context.arc(\n      (Canvas.space_size * space.x) + (Canvas.space_size / 2),\n      Canvas.space_size * space.y + (Canvas.space_size / 2),\n      (Canvas.space_size / 2) * 0.8,\n      0,\n      2 * Math.PI);\n    this.context.fillStyle = colour;\n    this.context.fill();\n  }\n\n  // Main interface:\n\n  // Reports the current state of the board\n  // this.board.spaces\n  board_state(args) {\n    this.draw_board();\n  }\n\n  // It's the start of a player's turn\n  // args.side\n  // args.turn\n  turn_starts(args) {\n    if (args.side == 'd') {\n      this.dwarf_side.style.opacity = 1;\n      this.troll_side.style.opacity = 0.6;\n      this.dwarf_declare_button.style.opacity = 1;\n      this.troll_declare_button.style.opacity = 0.4;\n    } else if (args.side == 't') {\n      this.troll_side.style.opacity = 1;\n      this.dwarf_side.style.opacity = 0.6;\n      this.troll_declare_button.style.opacity = 1;\n      this.dwarf_declare_button.style.opacity = 0.4;\n    }\n    this.draw_board();\n  }\n\n  // The player is thinking about moving from this space\n  // In the UI, this is a mouse hover, before a space is selected.\n  // args.x\n  // args.y\n  // args.moves\n  // args.in_danger\n  highlight_space(args) {\n    var reporter = this;\n    reporter.draw_board();\n    if(args.in_danger) {\n      reporter.heavy_outline_space(args, 'orange');\n    } else {\n      reporter.outline_space(args, 'lightgreen');\n    }\n    args.moves.forEach(\n      move => {\n          if (move.in_danger) {\n          reporter.outline_space(move, 'orange');\n        } else {\n          reporter.outline_space(move, Canvas.move_colours[move.type]);\n        }\n      }\n    );\n  }\n\n// The player has decided to move this piece.\n// In the UI, this is a click.\n// args.x\n// args.y\n  select_space(args) {\n    var reporter = this;\n    reporter.draw_board();\n    reporter.highlight_space(reporter.game.current_client().current_space);\n  }\n\n// The player is thinking of moving the piece from the selected space to this one.\n// In the UI, it's a mouse hover.\n// args.x\n// args.y\n// args.type\n  highlight_move(args) {\n    var reporter = this;\n    reporter.draw_board();\n    reporter.highlight_space(reporter.game.current_client().controller.checked_space);\n    if (args.kills >= 1) {\n      reporter.heavy_outline_space(args, 'red');\n    } else if (args.in_danger) {\n      reporter.heavy_outline_space(args, 'orange');\n    } else {\n      reporter.heavy_outline_space(args, Canvas.move_colours[args.type]);\n    }\n  }\n\n// The player makes a move.\n// In the UI, it's a click when a space is selected.\n// args.side\n// args.from.x\n// args.from.y\n// args.to.x\n// args.to.y\n  move(args) {\n  }\n\n// A piece has taken another piece (takes place after a move)\n// args.x\n// args.y\n// args.side\n  piece_taken(args) {\n    var reporter = this;\n\n    function draw_marker(alpha) {\n      reporter.overlay_context.beginPath();\n      reporter.overlay_context.arc(\n        (Canvas.space_size * args.x) + (Canvas.space_size / 2),\n        Canvas.space_size * args.y + (Canvas.space_size / 2),\n        (Canvas.space_size / 2) * 0.8,\n        0,\n        2 * Math.PI);\n      reporter.overlay_context.fillStyle = `rgba(255,0,0,${alpha})`;\n      reporter.overlay_context.fill();\n    }\n\n    function clear_square() {\n      reporter.overlay_context.clearRect(\n        Canvas.space_size * args.x,\n        Canvas.space_size * args.y,\n        Canvas.space_size,\n        Canvas.space_size\n      );\n    }\n\n    var alpha = 1;\n    var delta = 0.02;\n    draw_marker(alpha);\n\n    function fade() {\n      alpha -= delta;\n      clear_square();\n      draw_marker(alpha);\n      if (alpha >= 0) {\n        requestAnimationFrame(fade);\n      }\n    }\n\n    fade();\n  }\n\n// Someone's earned some points\n// game.get_score()\n  score(args) {\n    var score = this.game.get_score();\n    switch (score.winning) {\n      case 'd':\n        this.centre.classList.remove('troll');\n        this.centre.classList.add('dwarf');\n        break;\n      case 't':\n        this.centre.classList.remove('dwarf');\n        this.centre.classList.add('troll');\n        break;\n      case '?':\n        this.centre.classList.remove('dwarf');\n        this.centre.classList.remove('troll');\n    }\n    this.dwarf_side.innerHTML = `${this.game.dwarfs.length} dwarfs: ${score.dwarfs}`;\n    this.troll_side.innerHTML = `${this.game.trolls.length} trolls: ${score.trolls}`;\n    this.centre.innerHTML = score.difference;\n  }\n\n// A player has declared that the game is over (or retracted that declaration\n// args.side\n// args.game_over\n  player_declared(args) {\n    var button;\n    if (args.side == 'd') {\n      button = this.dwarf_declare_button;\n    } else if (args.side == 't') {\n      button = this.troll_declare_button;\n    }\n    if (args.game_over) {\n      button.innerHTML = 'Make War';\n    } else {\n      button.innerHTML = 'Make Peace';\n    }\n  }\n\n// The game's over, awww.\n// args.reason\n// this.game.get_score()\n  game_ended(args) {\n    var score = this.game.get_score();\n    var score_messages = {\n      d: `Dwarfs win by ${score.difference} points`,\n      t: `Trolls win by ${score.difference} points`,\n      '?': 'Nobody wins'\n    }\n    this.overlay_context.font = '45px Arial';\n    if (score.winning == 'd') {\n      this.overlay_context.fillStyle = 'blue';\n      this.overlay_context.strokeStyle = 'white';\n    } else if (score.winning == 't') {\n      this.overlay_context.fillStyle = 'green';\n      this.overlay_context.strokeStyle = 'white';\n    } else {\n      this.overlay_context.fillStyle = 'white';\n      this.overlay_context.strokeStyle = 'black';\n    }\n    this.overlay_context.textBaseline = 'middle';\n    this.overlay_context.textAlign = 'center';\n    this.end_text_line('Game Over!', 5);\n    this.end_text_line(args.reason, 7.5);\n    this.end_text_line(score_messages[score.winning], 10);\n  }\n\n  end_text_line(message, y) {\n    this.overlay_context.fillText(\n      message,\n      (Canvas.space_size * 7.5),\n      (Canvas.space_size * y)\n    );\n    this.overlay_context.strokeText(\n      message,\n      (Canvas.space_size * 7.5),\n      (Canvas.space_size * y)\n    );\n  }\n\n}\n\nmodule.exports = Canvas;\n\n\n//# sourceURL=webpack://Game/./src/reporters/canvas.js?");

/***/ }),

/***/ "./src/reporters/console.js":
/*!**********************************!*\
  !*** ./src/reporters/console.js ***!
  \**********************************/
/***/ ((module) => {

eval("class Console {\n  constructor(game) {\n    this.game = game;\n    this.board = game.board;\n  }\n\n  reinit(args) {\n    console.log(\"Starting new game.\")\n  }\n\n  // Reports the current state of the board\n  // this.board.spaces\n  board_state({}) {\n    // ignored\n  }\n\n  // It's the start of a player's turn\n  // args.side\n  // args.turn\n  turn_starts(args) {\n    console.log(`Turn ${args.turn} starts: ${this.get_side(args.side)} to move`);\n  }\n\n  // The player is thinking about moving from this space\n  // In the UI, this is a mouse hover, before a space is selected.\n  // args.x\n  // args.y\n  highlight_space(args) {\n    // ignored\n  }\n\n  // The player has decided to move this piece.\n  // In the UI, this is a click.\n  // args.x\n  // args.y\n  select_space(args) {\n    //ignored\n  }\n\n  // The player is thinking of moving the piece from the selected space to this one.\n  // In the UI, it's a mouse hover.\n  // args.x\n  // args.y\n  highlight_move(args) {\n    // ignored\n  }\n\n  // The player makes a move.\n  // In the UI, it's a click when a space is selected.\n  // args.side\n  // args.from.x\n  // args.from.y\n  // args.to.x\n  // args.to.y\n  move(args) {\n    console.log(`${this.get_side(args.side)} moves from ${args.from.x}:${args.from.y} to ${args.to.x}:${args.to.y}`);\n  }\n\n  // A piece has taken another piece (takes place after a move)\n  // args.x\n  // args.y\n  // args.side\n  piece_taken(args) {\n    console.log(`${this.get_side(args.side)} taken at ${args.x}:${args.y}`);\n  }\n\n  // Someone's earned soem points\n  // this.game.get_score()\n  score(args) {\n    var score = this.game.get_score();\n    console.log(`The score is now dwarfs: ${score.dwarfs}, trolls: ${score.trolls}... ${this.get_side(score.winning)} are winning by ${score.difference}`);\n  }\n\n  // A player has declared that the game is over (or retracted that declaration\n  // args.side\n  // args.game_over\n  player_declared(args) {\n    console.log(`${this.get_side(args.side)} declared that the game ${args.game_over ? 'is' : 'is not'} over`);\n  }\n\n  // The game's over, awww.\n  // args.reason\n  // this.game.get_score()\n  game_ended(args) {\n    var score = this.game.get_score();\n    console.log(`Game over! ${args.reason}! ${this.get_side(score.winning)} win by ${score.difference}`);\n  }\n\n  get_side(side) {\n    if (side == 'd') {\n      return 'dwarfs'\n    } else if (side == 't') {\n      return 'trolls'\n    } else {\n      return 'nobody'\n    }\n  }\n\n}\n\nmodule.exports = Console;\n\n//# sourceURL=webpack://Game/./src/reporters/console.js?");

/***/ }),

/***/ "./src/reporters/tournament.js":
/*!*************************************!*\
  !*** ./src/reporters/tournament.js ***!
  \*************************************/
/***/ ((module) => {

eval("class Tournament {\n  constructor(game) {\n    this.game = game;\n    this.board = game.board;\n  }\n\n  // Reports the current state of the board\n  // this.board.spaces\n  board_state({}) {\n\n  }\n\n  // It's the start of a player's turn\n  // args.side\n  // args.turn\n  turn_starts(args) {\n\n  }\n\n  // The player is thinking about moving from this space\n  // In the UI, this is a mouse hover, before a space is selected.\n  // args.x\n  // args.y\n  highlight_space(args) {\n\n  }\n\n  // The player has decided to move this piece.\n  // In the UI, this is a click.\n  // args.x\n  // args.y\n  select_space(args) {\n\n  }\n\n  // The player is thinking of moving the piece from the selected space to this one.\n  // In the UI, it's a mouse hover.\n  // args.x\n  // args.y\n  highlight_move(args) {\n\n  }\n\n  // The player makes a move.\n  // In the UI, it's a click when a space is selected.\n  // args.side\n  // args.from.x\n  // args.from.y\n  // args.to.x\n  // args.to.y\n  move(args) {\n\n  }\n\n  // A piece has taken another piece (takes place after a move)\n  // args.x\n  // args.y\n  // args.side\n  piece_taken(args) {\n\n  }\n\n  // Someone's earned soem points\n  // this.game.get_score()\n  score(args) {\n\n  }\n\n  // A player has declared that the game is over (or retracted that declaration\n  // args.side\n  // args.game_over\n  player_declared(args) {\n\n  }\n\n  // The game's over, awww.\n  //args.reason\n  // this.game.get_score()\n  game_ended(args) {\n    console.log(`${this.game.dwarf_client_name} vs. ${this.game.troll_client_name}`);\n    var score = this.game.get_score();\n    var winner = ((score.winning == 'd') ? this.game.dwarf_client_name : this.game.troll_client_name);\n    if (score.winning == '?') {\n      winner = 'nobody';\n    }\n    console.log(`${winner} wins by ${score.difference} (${args.reason}, turn ${this.game.turn_number})`);\n    console.log('');\n  }\n\n}\n\nmodule.exports = Tournament;\n\n\n//# sourceURL=webpack://Game/./src/reporters/tournament.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	Game = __webpack_exports__;
/******/ 	
/******/ })()
;